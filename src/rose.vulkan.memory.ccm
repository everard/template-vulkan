// Copyright Nezametdinov E. Ildus 2024.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// https://www.boost.org/LICENSE_1_0.txt)
//
module; // Global module fragment.
#include <everything>
#include <vulkan/vulkan.h>

export module rose.vulkan.memory;
export import rose.vulkan.device;

////////////////////////////////////////////////////////////////////////////////
//
// 1. Vulkan memory.
//
////////////////////////////////////////////////////////////////////////////////

export namespace rose::vulkan {

////////////////////////////////////////////////////////////////////////////////
// Vulkan memory definition.
////////////////////////////////////////////////////////////////////////////////

using memory = device_resource<VkDeviceMemory, vkFreeMemory>;

////////////////////////////////////////////////////////////////////////////////
// Vulkan memory allocation parameters definition.
////////////////////////////////////////////////////////////////////////////////

struct memory_allocation_parameters {
    VkMemoryRequirements requirements;
    VkMemoryPropertyFlags property_flags;
};

////////////////////////////////////////////////////////////////////////////////
// Vulkan memory chunk definition.
////////////////////////////////////////////////////////////////////////////////

struct memory_chunk {
    ////////////////////////////////////////////////////////////////////////////
    // Construction/destruction.
    ////////////////////////////////////////////////////////////////////////////

    memory_chunk(memory const& memory, VkDeviceSize offset = 0) noexcept
        : device{memory.parent}, memory{memory.handle}, offset{offset} {
    }

    ////////////////////////////////////////////////////////////////////////////
    // Data members.
    ////////////////////////////////////////////////////////////////////////////

    // Parent device.
    VkDevice device;

    // Memory handle.
    VkDeviceMemory memory;

    // Memory offset.
    VkDeviceSize offset;
};

////////////////////////////////////////////////////////////////////////////////
// Allocation interface.
////////////////////////////////////////////////////////////////////////////////

auto
allocate(device const& device, memory_allocation_parameters parameters) noexcept
    -> std::expected<memory, error> {
    // Obtain memory properties.
    auto const& memory_properties = device.parent.memory_properties;

    // Search for a suitable memory heap, then allocate memory from it.
    for(auto i = uint32_t{}; i != memory_properties.memoryTypeCount; ++i) {
        // Skip unsuitable memory types.
        if((parameters.requirements.memoryTypeBits & (1 << i)) == 0) {
            continue;
        }

        // Skip unsuitable memory types.
        if(parameters.property_flags !=
           (parameters.property_flags &
            memory_properties.memoryTypes[i].propertyFlags)) {
            continue;
        }

        // Allocate memory.
        return initialize<memory>(
            vkAllocateMemory, device,
            {.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
             .allocationSize = parameters.requirements.size,
             .memoryTypeIndex = i});
    }

    // Allocation failed: no suitable memory heap has been found.
    return std::unexpected{error{__LINE__, 0}};
}

////////////////////////////////////////////////////////////////////////////////
// Data transmission interface.
////////////////////////////////////////////////////////////////////////////////

auto
read(memory_chunk source, std::span<std::byte> target) noexcept
    -> std::expected<void, error> {
    // Map the memory.
    void* mapped = nullptr;
    if(auto code = vkMapMemory( //
           source.device, source.memory, source.offset, target.size(), 0,
           &mapped);
       code != VK_SUCCESS) {
        return std::unexpected{error{__LINE__, code}};
    }

    // Make sure the memory is unmapped upon return from this function.
    struct guard {
        ~guard() {
            // Unmap the memory.
            vkUnmapMemory(chunk.device, chunk.memory);
        }

        memory_chunk chunk;
    } _{.chunk = source};

    // Invalidate the mapped memory range.
    auto range =
        VkMappedMemoryRange{.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
                            .memory = source.memory,
                            .offset = source.offset,
                            .size = target.size()};

    if(auto code = vkInvalidateMappedMemoryRanges(source.device, 1, &range);
       code != VK_SUCCESS) {
        return std::unexpected{error{__LINE__, code}};
    }

    // Read the data.
    std::ranges::copy(
        std::span{static_cast<std::byte const*>(mapped), target.size()},
        std::begin(target));

    return {};
}

auto
write(memory_chunk target, std::span<std::byte const> source) noexcept
    -> std::expected<void, error> {
    // Map the memory.
    void* mapped = nullptr;
    if(auto code = vkMapMemory( //
           target.device, target.memory, target.offset, source.size(), 0,
           &mapped);
       code != VK_SUCCESS) {
        return std::unexpected{error{__LINE__, code}};
    }

    // Make sure the memory is unmapped upon return from this function.
    struct guard {
        ~guard() {
            // Unmap the memory.
            vkUnmapMemory(chunk.device, chunk.memory);
        }

        memory_chunk chunk;
    } _{.chunk = target};

    // Write the data.
    std::ranges::copy(source, static_cast<std::byte*>(mapped));

    // Flush the written memory range.
    auto range =
        VkMappedMemoryRange{.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE,
                            .memory = target.memory,
                            .offset = target.offset,
                            .size = source.size()};

    if(auto code = vkFlushMappedMemoryRanges(target.device, 1, &range);
       code != VK_SUCCESS) {
        return std::unexpected{error{__LINE__, code}};
    }

    return {};
}

} // namespace rose::vulkan
